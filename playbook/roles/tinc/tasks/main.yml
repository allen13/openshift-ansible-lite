- name: install tinc
  yum: name=tinc

- name: ensure tinc netname directory exists
  file:
    path: /etc/tinc/{{ vpn_netname }}/hosts
    recurse: yes
    state: directory

- name: create /etc/tinc/nets.boot file from template
  template:
    src: nets.boot
    dest: /etc/tinc/nets.boot
  notify: restart tinc

- name: setup tinc.conf
  template: src=tinc.conf dest=/etc/tinc/{{ vpn_netname }}/tinc.conf
  notify: reload tinc

- name: create tinc-up file
  template:
    src: tinc-up
    dest: /etc/tinc/{{ vpn_netname }}/tinc-up
    mode: 0755
  notify: restart tinc

- name: create tinc-down file
  template:
    src: tinc-down
    dest: /etc/tinc/{{ vpn_netname }}/tinc-down
    mode: 0755
  notify: restart tinc

- name: ensure tinc hosts file binds to physical ip address
  lineinfile:
    dest: /etc/tinc/{{ vpn_netname }}/hosts/{{ vpn_hostname }}
    line: "Address = {{ public_ip }}"
    create: yes
  notify: restart tinc

- name: add host subnets to advertise to vpn
  lineinfile:
    dest: /etc/tinc/{{ vpn_netname }}/hosts/{{ vpn_hostname }}
    line: "Subnet = {{ item }}"
    create: yes
    insertbefore: BOF
  notify: restart tinc
  with_items: "{{ vpn_advertise_subnets }}"

- name: check whether /etc/tinc/{{ vpn_netname }}/hosts/{{ vpn_hostname }} contains "-----END RSA PUBLIC KEY-----"
  command: awk '/^-----END RSA PUBLIC KEY-----$/'  /etc/tinc/{{ vpn_netname }}/hosts/{{ vpn_hostname }}
  changed_when: "public_key.stdout != '-----END RSA PUBLIC KEY-----'"
  register: public_key

- name: delete private key and regenerate keypair if public key is absent from tinc hosts file
  file: path=/etc/tinc/{{ vpn_netname }}/rsa_key.priv state=absent
  when: public_key.changed

- name: create tinc private key (and append public key to tincd hosts file)
  shell: tincd -n {{ vpn_netname }} -K4096
  args:
    creates: /etc/tinc/{{ vpn_netname }}/rsa_key.priv
  notify: restart tinc

- name: fetch tinc hosts file after key creation
  fetch:
    src: /etc/tinc/{{ vpn_netname }}/hosts/{{ vpn_hostname }}
    dest: files/tinc/{{ openshift_cluster }}/{{ vpn_netname }}/{{ vpn_hostname }}
    flat: yes
  notify: reload tinc

- name: copy host files to each host
  copy: src={{ item }} dest=/etc/tinc/{{ vpn_netname }}/hosts/
  notify: reload tinc
  with_fileglob: files/tinc/{{ openshift_cluster }}/{{ vpn_netname }}/*

- name: create tinc systemd service file
  template:
    src: tinc.service
    dest: /etc/systemd/system/tinc.service
  register: tinc_service_file

- name: systemctl daemon-reload
  shell: systemctl daemon-reload
  when: tinc_service_file.changed

- name: run handlers
  meta: flush_handlers

- name: ensure tinc is started
  service: name=tinc enabled=yes state=started pattern=tincd -n {{ vpn_netname }}
