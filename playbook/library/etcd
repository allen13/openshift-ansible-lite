#!/usr/bin/env python
# -*- coding: utf-8 -*-

DOCUMENTATION = """
---
module: etcd
short_description: Set and delete values from etcd
description:
  - Sets or deletes values in etcd.
  - Parent directories of the key will be created if they do not already exist.
version_added: "0.1"
author: Rafe Colton
notes:
  - Supports check mode.
  - Adapted from https://github.com/devo-ps/ansible-addons
requirements:
  - requests >= 2.4
  - python-etcd >= 0.3.2
options:
  state:
    description:
      - This will be the state of the key in etcd
      - after this module completes its operations.
    required: false
    choices: [present, absent]
    default: present
  host:
    description:
      - The etcd host to use
    required: false
    default: 127.0.0.1
  port:
    description:
      - The port to use on the above etcd host
    required: false
    default: 2379
  key:
    description:
      - The key in etcd at which to set the value
    required: true
    default: null
  value:
    description:
      - The value to be set in etcd
    required: true
    default: null
  allow_redirect:
    description:
      - Etcd attempts to redirect all write requests to the etcd master
      - for safety reasons. If allow_redirect is set to false, such
      - redirection will not be allowed. In this case, the value for `host`
      - must be the etcd leader or this module will err.
    required: false
    default: true
"""

EXAMPLES = """
# set a value in etcd
- etcd:
    state=present
    host=my-etcd-host.example.com
    port=2379
    key=/asdf/foo/bar/baz/gorp
    value=my-foo-bar-baz-gor-server.prod.example.com

# delete a value from etcd
- etcd:
    state=absent
    host=my-etcd-host.example.com
    port=2379
    key=/asdf/foo/bar/baz/gorp

# NOTE: you may wish to use `connection: local` with these tasks
"""

try:
    import etcd
    etcd_found = True
except ImportError:
    etcd_found = False

try:
    import requests
    requests_found = True
except ImportError:
    requests_found = False


def build_key_paths(key):
    #/coreos.com/network/config -> ['/coreos.com', '/coreos.com/network']
    key_paths = []
    dirname = os.path.dirname(key)

    while True:
        if dirname == "/":
            break
        else:
            key_paths.append(dirname)
        dirname = os.path.dirname(dirname)

    return key_paths

class EtcdModule:

    def __init__(self, module):
        self.module = module
        params = module.params
        self.client = self.get_etcd_client()
        self.state = params['state']
        self.key = params['key']
        self.value = params['value']

    def get_etcd_client(self):
        kwargs = {
            'host': self.module.params['host'],
            'port': int(self.module.params['port']),
            'allow_redirect': self.module.params['allow_redirect']
        }

        return etcd.Client(**kwargs)

    def get_etcd_value(self):
        try:
            value = self.client.get(self.key).value
        except (KeyError, etcd.EtcdKeyNotFound):
            value = None
        except requests.ConnectionError:
            self.module.fail_json(msg="Can not connect to target.")
        except etcd.EtcdException as err:
            self.module.fail_json(msg="Etcd error: %s" % err)

        return value

    def ensure_key_paths_exist(self):
        key_paths = build_key_paths(self.key)

        for key_path in key_paths:
            try:
                self.client.get(key_path).value
            except (KeyError, etcd.EtcdKeyNotFound):
                self.client.write(key_path, '', dir=True)
            except requests.ConnectionError:
                self.module.fail_json(msg="Can not connect to target.")
            except etcd.EtcdException as err:
                self.module.fail_json(msg="Etcd error: %s" % err)

    def create_or_update_key(self, current_value):

        if self.value == current_value or self.value == None:
            self.module.exit_json(changed=False, value=current_value)
        else:
            try:
                self.ensure_key_paths_exist()
                self.client.write(self.key, self.value)
            except requests.ConnectionError:
                self.module.fail_json(msg="Can not connect to target.")

            self.module.exit_json(changed=True, value=self.value)

    def destroy_key(self, current_value):
        if current_value == None:
            self.module.exit_json(changed=False, value=None)
        else:
            try:
                self.client.delete(key)
                self.module.exit_json(changed=True, value=None)
            except requests.ConnectionError:
                self.module.fail_json(msg="Can not connect to target.")

    def maintain_etcd_keys(self):
        current_value = self.get_etcd_value()

        if self.state == 'present':
            self.create_or_update_key(current_value)
        else:
            self.destroy_key(current_value)

def main():
    module = AnsibleModule(
        argument_spec=dict(
            state=dict(required=False, default='present', choices=['present', 'absent']),
            allow_redirect=dict(required=False, default=True),
            host=dict(required=False, default='127.0.0.1'),
            key=dict(required=True),
            port=dict(default=2379),
            value=dict(required=False, default=None),
        ),
        supports_check_mode=True
    )

    if not etcd_found:
        module.fail_json(msg="the python etcd module is required")

    if not requests_found:
        module.fail_json(msg="the python requests module is required")

    EtcdModule(module).maintain_etcd_keys()

from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()
